// This is your updated Prisma schema file
// Location: backend/prisma/schema.prisma
// 
// INSTRUCTIONS:
// 1. Replace the entire content of backend/prisma/schema.prisma with this
// 2. Run: cd backend && npx prisma migrate dev --name add-conversations
// 3. Run: npx prisma generate

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  avatar        String?
  password      String?
  provider      String   @default("email")
  providerId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[] // Added: User can have many conversations
  digests       Digest[] // User's digest subscriptions
  
  // Stripe & Billing
  stripeCustomerId  String?      @unique
  subscription      Subscription?
  usage             Usage?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// NEW MODELS FOR CONVERSATION SYSTEM

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String // 'user' or 'assistant'
  content        String       @db.Text
  audioUrl       String? // S3 URL for audio files
  audioDuration  Int? // Duration in seconds
  metadata       Json? // Store sources, settings, model info, etc.
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@map("messages")
}

// DIGEST SUBSCRIPTION MODELS

model Digest {
  id               String    @id @default(cuid())
  userId           String
  title            String    // User-friendly name: "AI News Daily"
  searchQuery      String    // Query for Perplexity: "AI image generation latest news"
  frequency        String    // "daily" | "weekly" | "monthly"
  audioLength      Int       // 2, 5, or 10 (minutes)
  deliveryEmail    String?   // Optional: override user's default email
  useDefaultEmail  Boolean   @default(true) // Use account email by default
  timezone         String    @default("UTC") // User's timezone: "Asia/Bangkok", "America/New_York"
  preferredHour    Int       @default(8) // Preferred delivery hour in user's timezone (0-23)
  isActive         Boolean   @default(true)
  nextGenerationAt DateTime? // When to generate next digest (in UTC)
  lastGeneratedAt  DateTime? // Track last generation to prevent duplicates
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries       DigestDelivery[]

  @@index([userId])
  @@index([isActive, nextGenerationAt])
  @@map("digests")
}

model DigestDelivery {
  id            String    @id @default(cuid())
  digestId      String
  audioUrl      String    // S3 URL for the generated audio
  transcript    String    @db.Text // Full text transcript
  searchResults Json      // Raw search data from Perplexity
  delivered     Boolean   @default(false)
  deliveredAt   DateTime?
  createdAt     DateTime  @default(now())

  digest        Digest    @relation(fields: [digestId], references: [id], onDelete: Cascade)

  @@index([digestId])
  @@index([createdAt])
  @@map("digest_deliveries")
}

// STRIPE & BILLING MODELS

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeSubscriptionId String   @unique
  stripePriceId        String
  status               String   // active, canceled, past_due, trialing
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@map("subscriptions")
}

model Usage {
  id          String   @id @default(cuid())
  userId      String   @unique
  period      String   // YYYY-MM format
  tokens      Int      @default(0)
  tokenLimit  Int      @default(500000) // 500K tokens per month
  extraTokens Int      @default(0) // Additional purchased tokens
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, period])
  @@index([period])
  @@map("usage")
}

// Track Stripe webhook events for idempotency
model WebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  type            String
  processed       Boolean  @default(false)
  error           String?
  createdAt       DateTime @default(now())
  
  @@index([type, processed])
  @@map("webhook_events")
}
