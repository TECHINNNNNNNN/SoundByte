// This is your updated Prisma schema file
// Location: backend/prisma/schema.prisma
// 
// INSTRUCTIONS:
// 1. Replace the entire content of backend/prisma/schema.prisma with this
// 2. Run: cd backend && npx prisma migrate dev --name add-conversations
// 3. Run: npx prisma generate

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  avatar        String?
  password      String?
  provider      String   @default("email")
  providerId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[] // Added: User can have many conversations

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// NEW MODELS FOR CONVERSATION SYSTEM

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String // 'user' or 'assistant'
  content        String       @db.Text
  audioUrl       String? // S3 URL for audio files
  audioDuration  Int? // Duration in seconds
  metadata       Json? // Store sources, settings, model info, etc.
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@map("messages")
}
